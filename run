#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const chalk = require('chalk')
const spawn = require('react-dev-utils/crossSpawn')

const appRoot = process.cwd()
const appPackagePath = path.join(appRoot, 'package.json')

let [command, ...args] = process.argv.slice(2)

const knownCommands = [
  'build',
  'dev',
  'export',
  'help',
  'new',
  'version',
]

if (knownCommands.indexOf(command) < 0) {
  if (command) console.log(chalk.yellow(`Unknown command "${command}"`))
  command = 'help'
}

// Check that project has package.json and node_modules

if (command==='new' || command==='help') {

  // Pass through

} else if (command==='version') {

  const {
    name, version
  } = require('./package.json')

  console.log(`${name} ${version}`)

  process.exit()

} else if (!fs.existsSync(appPackagePath)) {

  console.log(chalk.yellow('No package.json found'))
  command = 'help'

} else {

  const { name } = require(appPackagePath)

  if (name) console.log(`Project "${name}"\n`)

  if (!fs.existsSync(path.join(appRoot, 'node_modules'))) {

    console.log(chalk.yellow('Please run "npm install" or "yarn"'))
    command = 'help'
  }
}

const run = (...cmd) => spawn.sync('node', cmd, { stdio: 'inherit' })

let result = {}

switch (command) {
case 'export':

  // Build for production
  result = require('./scripts/build') // run(require.resolve('./scripts/build'))

  // Export
  if (!result.signal) {

    // Resolve from built application
    const serverPath = path.join(appRoot, 'build', 'server.js')

    if (fs.existsSync(serverPath)) {
      process.env.APP_EXPORT = 1
      result = run(serverPath)
    } else {
      console.log(chalk.red('Server not found at build/server.js'))
    }
  }

  process.exit(
    !result ? 0 : (result.signal ? 1 : result.status)
  )

  break
default:
  result = require('./scripts/' + command) // run(require.resolve('./scripts/' + command))
}
